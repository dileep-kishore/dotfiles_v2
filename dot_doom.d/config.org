#+title: Doom Emacs literate config

* Configuring private settings

Identify configuration for various functionality, e.g. *GPG* configuration, /email/, file templates and snippets
#+begin_src elisp
(setq user-full-name "Dileep Kishore"
      user-mail-address "k.dileep1994@gmail.com")
#+end_src
* Emacs daemon

For running a =systemd= service for Emacs server
#+begin_src systemd :tangle no
[Unit]
Description=Emacs server daemon
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=sh -c 'emacs --daemon && emacsclient -c --eval "(delete-frame)"'
ExecStop=/usr/bin/emacsclient --no-wait --eval "(progn (setq kill-emacs-hook nil) (kill emacs))"
Restart=on-failure

[Install]
WantedBy=default.target
#+end_src

which is enabled by
#+begin_src shell :tangle no
systemctl --user enable emacs.service
#+end_src

Make =Emacs= the "default app" for opening files by adding a desktop entry
#+begin_src config :tangle no
[Desktop Entry]
Name=Emacs client
GenericName=Text Editor
Comment=A flexible platform for end-user applications
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacsclient -create-frame --alternate-editor="" --no-wait %F
Icon=emacs
Type=Application
Terminal=false
Categories=TextEditor;Utility;
StartupWMClass=Emacs
Keywords=Text;Editor;
X-KDE-StartupNotify=false
#+end_src

Using =Emacs= from the =CLI=, saved to =~/.dotfiles/bin/emacs-cli.sh=
#+begin_src bash :tangle no
#!/usr/bin/env bash
force_tty=false
force_wait=false
stdin_mode=""

args=()

while :; do
    case "$1" in
        -t | -nw | --tty)
            force_tty=true
            shift ;;
        -w | --wait)
            force_wait=true
            shift ;;
        -m | --mode)
            stdin_mode=" ($2-mode)"
            shift 2 ;;
        -h | --help)
            echo -e "\033[1mUsage: e [-t] [-m MODE] [OPTIONS] FILE [-]\033[0m

Emacs client convenience wrapper.

\033[1mOptions:\033[0m
\033[0;34m-h, --help\033[0m            Show this message
\033[0;34m-t, -nw, --tty\033[0m        Force terminal mode
\033[0;34m-w, --wait\033[0m            Don't supply \033[0;34m--no-wait\033[0m to graphical emacsclient
\033[0;34m-\033[0m                     Take \033[0;33mstdin\033[0m (when last argument)
\033[0;34m-m MODE, --mode MODE\033[0m  Mode to open \033[0;33mstdin\033[0m with

Run \033[0;32memacsclient --help\033[0m to see help for the emacsclient."
            exit 0 ;;
        --*=*)
            set -- "$@" "${1%%=*}" "${1#*=}"
            shift ;;
        *)
            if [ "$#" = 0 ]; then
                break; fi
            args+=("$1")
            shift ;;
    esac
done

if [ ! "${#args[*]}" = 0 ] && [ "${args[-1]}" = "-" ]; then
    unset 'args[-1]'
    TMP="$(mktemp /tmp/emacsstdin-XXX)"
    cat > "$TMP"
    args+=(--eval "(let ((b (generate-new-buffer \"*stdin*\"))) (switch-to-buffer b) (insert-file-contents \"$TMP\") (delete-file \"$TMP\")${stdin_mode})")
fi

if [ -z "$DISPLAY" ] || $force_tty; then
    # detect terminals with sneaky 24-bit support
    if { [ "$COLORTERM" = truecolor ] || [ "$COLORTERM" = 24bit ]; } \
        && [ "$(tput colors 2>/dev/null)" -lt 257 ]; then
        if echo "$TERM" | grep -q "^\w\+-[0-9]"; then
            termstub="${TERM%%-*}"; else
            termstub="${TERM#*-}"; fi
        if infocmp "$termstub-direct" >/dev/null 2>&1; then
            TERM="$termstub-direct"; else
            TERM="xterm-direct"; fi # should be fairly safe
    fi
    emacsclient --tty -create-frame --alternate-editor="" "${args[@]}"
else
    if ! $force_wait; then
        args+=(--no-wait); fi
    emacsclient -create-frame --alternate-editor="" "${args[@]}"
fi
#+end_src

* Useful functions/macros that are helpful for configuration

- *load!* for loading external *.el files relative to this one
- *use-package!* for configuring packages
- *after!* for running code after a package has loaded
- *add-load-path!* for adding directories to the *load-path*, relative to
this file. Emacs searches the *load-path* when you load packages with
*require* or *use-package*.
- *map!* for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press =K= (non-evil users must press =C-c c k=).
This will open documentation for it, including demos of how they are used.

You can also try =gd= (or =C-c c d=) to jump to their definition and see how
they are implemented.

* The looks

** Theme configuration

There are two ways to load a /theme/ in *Doom Emacs*, assuming that it is installed and available
1. Set it using the =doom-theme= variable
2. Manually load it using the =load-theme= function

#+begin_src elisp
(setq doom-theme 'doom-palenight)
#+end_src

Nicer name for the default fallback buffer
#+begin_src elisp
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")
#+end_src

Only show file-enconding when format is not =LF UTF-8= (source [[Credits][Tecosaur]])
#+begin_src elisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                 '(coding-category-undecided coding-category-utf-8))
                           (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                t)))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src

Simpler window title that shows if a file was modified:
#+begin_src elisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-roam-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" " ● %s") project-name))))))
#+end_src

** Font configuration

Doom exposes five (optional) variables for controlling fonts:
- =doom-font=
- =doom-serif-font= (not super sure about this one)
- =doom-variable-pitch-font=
- =doom-unicode-font=
- =doom-big-font= - Used for =doom-big-font-mode= for presentations or streaming
#+begin_src elisp
(setq doom-font (font-spec :family "VictorMono Nerd Font" :size 15)
      doom-variable-pitch-font (font-spec :family "Overpass Nerd Font" :size 15)
      doom-unicode-font (font-spec :family "FiraCode Nerd Font" :size 15)
      doom-serif-font (font-spec :family "BlexMono Nerd Font" :weight 'light :size 15)
      doom-big-font (font-spec :family "Overpass Nerd Font" :size 25))
#+end_src

Code snippet to check if we are missing our required font (from [[Credits][Tecosaur]])
#+begin_src elisp
(defvar required-fonts '("VictorMono Nerd Font" "Overpass Nerd Font" "FiraCode Nerd Font" "BlexMono Nerd Font"))

(defvar available-fonts
  (delete-dups (or (font-family-list)
                   (split-string (shell-command-to-string "fc-list : family")
                                 "[,\n]"))))

(defvar missing-fonts
  (delq nil (mapcar
             (lambda (font)
               (unless (delq nil (mapcar (lambda (f)
                                           (string-match-p (format "^%s$" font) f))
                                         available-fonts))
                 font))
             required-fonts)))

(if missing-fonts
    (pp-to-string
     `(unless noninteractive
        (add-hook! 'doom-init-ui-hook
          (run-at-time nil nil
                       (lambda ()
                         (message "%s missing the following fonts: %s"
                                  (propertize "Warning!" 'face '(bold warning))
                                  (mapconcat (lambda (font)
                                               (propertize font 'face 'font-lock-variable-name-face))
                                             ',missing-fonts
                                             ", "))
                         (sleep-for 0.5))))))
  ";; No missing fonts detected")
#+end_src

We can change the font used in the various faces across /Emacs/ using =custom-set-faces=.

There are several faces, some of them are:
- =font-lock-preprocessor-face=
- =font-lock-comment-face=
- =font-lock-keyword-face=
- =font-lock-comment-face=
- =font-lock-constant-face=
- =font-lock-function-name-face=
- =font-lock-keyword-face=
- =font-lock-preprocessor-face=
- =font-lock-string-face=
- =hl-todo=
- =info-colors-lisp-code-block=
- =markdown-code-face=

#+begin_src elisp
(custom-set-faces!
  '(font-lock-preprocessor-face :weight bold)
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic :weight bold))
#+end_src



* Simple settings

- Delete files to trash
- Take new window space from all other windows (not just current)
- Strech cursor to glyph width (for variable-pitch-font)
#+begin_src elisp
(setq-default
 delete-by-moving-to-trash t
 window-combination-resize t
 x-stretch-cursor t)
#+end_src

- Raise the undow limit to =80Mb=
- Granular undos in insert mode!
- Unicde ellipsis ( )
#+begin_src elisp
(setq undo-limit 80000000
      evil-want-fine-undo t
      truncate-string-ellipsis " ")
#+end_src

Being able to see which buffer to open after splitting windows
1. First we will enter the new window
    #+begin_src elisp
    (setq evil-vsplit-window-right t
        evil-split-window-below t)
    #+end_src
2. Then we will pull up =ivy=
    #+begin_src elisp
    (defadvice! prompt-for-buffer (&rest _)
    :after '(evil-window-split evil-window-vsplit)
    (+ivy/switch-buffer))
    #+end_src
3. Also, enable previews
    #+begin_src elisp
    (setq +ivy-buffer-preview t)
    #+end_src

Add keybinding to rotate the layout of all windows
#+begin_src elisp
(map! :map evil-window-map
      "SPC" #'rotate-layout)
#+end_src


* Vim and Evil mode configuration

This determines the style of the /line numbers/
#+begin_src elisp
(setq display-line-numbers-type 'relative)
#+end_src

* Email

** Setting up =mu4e=

I followed the instructions in the [[org:../../.emacs.d/modules/email/mu4e/README.org][mu4e documentation in Doom Emacs]].
The default mail directory is assumed to be =~/.mail=

This is the configuration for *Personal* email
#+begin_src elisp
(set-email-account! "Personal"
                    '((mu4e-sent-folder       . "/Personal/Sent Mail")
                      (mu4e-drafts-folder     . "/Personal/Drafts")
                      (mu4e-trash-folder      . "/Personal/Trash")
                      (mu4e-refile-folder     . "/Personal/All Mail")
                      (smtpmail-smtp-user     . "kdileep1994@gmail.com")
                      (user-mail-address      . "kdileep1994@gmail.com")    ;; only needed for mu < 1.4
                      (mu4e-compose-signature . "---\nBest,\nDileep Kishore"))
                    t)
#+end_src

This is the configuration for *Boston University* email
#+begin_src elisp
(set-email-account! "BU"
                    '((mu4e-sent-folder       . "/BU/Sent Mail")
                      (mu4e-drafts-folder     . "/BU/Drafts")
                      (mu4e-trash-folder      . "/BU/Trash")
                      (mu4e-refile-folder     . "/BU/All Mail")
                      (smtpmail-smtp-user     . "dkishore@bu.edu")
                      (user-mail-address      . "dkishore@bu.edu")    ;; only needed for mu < 1.4
                      (mu4e-compose-signature . "---\nDileep Kishore\nPh.D. Student | Segrè Lab\nGraduate Program in Bioinformatics | Boston University"))
                    t)
#+end_src

* Org-mode and Org-roam configuration

Set up the default directories
#+begin_src elisp
(setq org-directory "~/Documents/Org")
(setq org-roam-directory "~/Documents/Org/Roam")
#+end_src

* Credits

- [[https://tecosaur.github.io/emacs-config][Tecosaur's emacs config]]
- [[https://www.youtube.com/playlist?list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj][Doomcasts by Zaiste Programming]]
