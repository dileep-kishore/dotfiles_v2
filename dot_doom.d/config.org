#+title: Doom Emacs literate config
#+author: Dileep Kishore
#+description: My Doom Emacs configuration file

Making this file run a little faster
#+begin_src elisp
;;; config.el -*- lexical-binding: t; -*-
#+end_src

* Table of Contents :TOC:
- [[#configuring-private-settings][Configuring private settings]]
  - [[#enabling-ssh-agents][Enabling SSH agents]]
  - [[#setting-up-email-with-mu4e][Setting up email with =mu4e=]]
- [[#emacs-daemon][Emacs daemon]]
- [[#useful-functionsmacros-that-are-helpful-for-configuration][Useful functions/macros that are helpful for configuration]]
- [[#the-looks][The looks]]
  - [[#theme-configuration][Theme configuration]]
  - [[#font-configuration][Font configuration]]
  - [[#ligatures][Ligatures]]
  - [[#mixed-pitch-mode][Mixed pitch mode]]
  - [[#whitespace][Whitespace]]
  - [[#writeroom-configuration][Writeroom configuration]]
- [[#simple-settings][Simple settings]]
  - [[#battery-status-and-password-cache][Battery status and password-cache]]
  - [[#deleting-files-undo-limits-etc][Deleting files, undo limits, etc.]]
  - [[#select-buffer-after-splitting][Select buffer after splitting]]
  - [[#rotate-layouts][Rotate layouts]]
  - [[#wakatime-mode][Wakatime-mode]]
  - [[#chezmoi-keybindings][Chezmoi keybindings]]
- [[#buffers-and-windows][Buffers and windows]]
  - [[#ivy-buffers][Ivy Buffers]]
  - [[#registers][Registers]]
- [[#dired][dired]]
  - [[#keybindings][Keybindings]]
- [[#autocompletions-and-snippets][Autocompletions and snippets]]
  - [[#autocompletions][Autocompletions]]
  - [[#snippets][Snippets]]
- [[#vim-and-evil-mode-configuration][Vim and Evil mode configuration]]
- [[#org-mode-and-org-roam-configuration][Org-mode and Org-roam configuration]]
  - [[#org-mode-tasks][Org-mode tasks]]
  - [[#org-agenda-and-org-super-agenda-configuration][Org-agenda and org-super-agenda configuration]]
  - [[#support-lsp-in-src-blocks][Support =lsp= in =src= blocks]]
  - [[#org-roam][Org-roam]]
  - [[#org-mode-addons][Org-mode addons]]
  - [[#git-commit-keybinding][Git-commit keybinding]]
- [[#language-specific-configuration][Language specific configuration]]
  - [[#julia][Julia]]
- [[#credits][Credits]]

* Configuring private settings

Identify configuration for various functionality, e.g. *GPG* configuration, /email/, file templates and snippets
#+begin_src elisp
(setq user-full-name "Dileep Kishore"
      user-mail-address "k.dileep1994@gmail.com")
#+end_src

** Enabling SSH agents

By default doom blacklists =SSH_AUTH_SOCK= and =SSH_AUTH_PID= variables, which means ssh agents don't work.
#+begin_src elisp
(when noninteractive
  (add-to-list 'doom-env-whitelist "^SSH_"))
#+end_src

** Setting up email with =mu4e=

I followed the instructions in the [[org:../../.emacs.d/modules/email/mu4e/README.org][mu4e documentation in Doom Emacs]].
The default mail directory is assumed to be =~/.mail=

This is the configuration for *Personal* email
#+begin_src elisp
(set-email-account! "Personal"
                    '((mu4e-sent-folder       . "/Personal/Sent Mail")
                      (mu4e-drafts-folder     . "/Personal/Drafts")
                      (mu4e-trash-folder      . "/Personal/Trash")
                      (mu4e-refile-folder     . "/Personal/All Mail")
                      (smtpmail-smtp-user     . "kdileep1994@gmail.com")
                      (user-mail-address      . "kdileep1994@gmail.com")    ;; only needed for mu < 1.4
                      (mu4e-compose-signature . "---\nBest,\nDileep Kishore"))
                    t)
#+end_src

This is the configuration for *Boston University* email
#+begin_src elisp
(set-email-account! "BU"
                    '((mu4e-sent-folder       . "/BU/Sent Mail")
                      (mu4e-drafts-folder     . "/BU/Drafts")
                      (mu4e-trash-folder      . "/BU/Trash")
                      (mu4e-refile-folder     . "/BU/All Mail")
                      (smtpmail-smtp-user     . "dkishore@bu.edu")
                      (user-mail-address      . "dkishore@bu.edu")    ;; only needed for mu < 1.4
                      (mu4e-compose-signature . "---\nDileep Kishore\nPh.D. Student | Segrè Lab\nGraduate Program in Bioinformatics | Boston University"))
                    t)
#+end_src
* Emacs daemon

For running a =systemd= service for Emacs server
#+begin_src systemd :tangle no
[Unit]
Description=Emacs server daemon
Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

[Service]
Type=forking
ExecStart=sh -c 'emacs --daemon && emacsclient -c --eval "(delete-frame)"'
ExecStop=/usr/bin/emacsclient --no-wait --eval "(progn (setq kill-emacs-hook nil) (kill emacs))"
Restart=on-failure

[Install]
WantedBy=default.target
#+end_src

which is enabled by
#+begin_src shell :tangle no
systemctl --user enable emacs.service
#+end_src

Make =Emacs= the "default app" for opening files by adding a desktop entry
#+begin_src config :tangle no
[Desktop Entry]
Name=Emacs client
GenericName=Text Editor
Comment=A flexible platform for end-user applications
MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
Exec=emacsclient -create-frame --alternate-editor="" --no-wait %F
Icon=emacs
Type=Application
Terminal=false
Categories=TextEditor;Utility;
StartupWMClass=Emacs
Keywords=Text;Editor;
X-KDE-StartupNotify=false
#+end_src

Using =Emacs= from the =CLI=, saved to =~/.dotfiles/bin/emacs-cli.sh=
#+begin_src bash :tangle no
#!/usr/bin/env bash
force_tty=false
force_wait=false
stdin_mode=""

args=()

while :; do
case "$1" in
-t | -nw | --tty)
force_tty=true
shift ;;
-w | --wait)
force_wait=true
shift ;;
-m | --mode)
stdin_mode=" ($2-mode)"
shift 2 ;;
-h | --help)
echo -e "\033[1mUsage: e [-t] [-m MODE] [OPTIONS] FILE [-]\033[0m

Emacs client convenience wrapper.

\033[1mOptions:\033[0m
\033[0;34m-h, --help\033[0m            Show this message
\033[0;34m-t, -nw, --tty\033[0m        Force terminal mode
\033[0;34m-w, --wait\033[0m            Don't supply \033[0;34m--no-wait\033[0m to graphical emacsclient
\033[0;34m-\033[0m                     Take \033[0;33mstdin\033[0m (when last argument)
\033[0;34m-m MODE, --mode MODE\033[0m  Mode to open \033[0;33mstdin\033[0m with

Run \033[0;32memacsclient --help\033[0m to see help for the emacsclient."
exit 0 ;;
--*=*)
set -- "$@" "${1%%=*}" "${1#*=}"
shift ;;
*)
if [ "$#" = 0 ]; then
break; fi
args+=("$1")
shift ;;
esac
done

if [ ! "${#args[*]}" = 0 ] && [ "${args[-1]}" = "-" ]; then
unset 'args[-1]'
TMP="$(mktemp /tmp/emacsstdin-XXX)"
cat > "$TMP"
args+=(--eval "(let ((b (generate-new-buffer \"*stdin*\"))) (switch-to-buffer b) (insert-file-contents \"$TMP\") (delete-file \"$TMP\")${stdin_mode})")
fi

if [ -z "$DISPLAY" ] || $force_tty; then
# detect terminals with sneaky 24-bit support
if { [ "$COLORTERM" = truecolor ] || [ "$COLORTERM" = 24bit ]; } \
&& [ "$(tput colors 2>/dev/null)" -lt 257 ]; then
if echo "$TERM" | grep -q "^\w\+-[0-9]"; then
termstub="${TERM%%-*}"; else
termstub="${TERM#*-}"; fi
if infocmp "$termstub-direct" >/dev/null 2>&1; then
TERM="$termstub-direct"; else
TERM="xterm-direct"; fi # should be fairly safe
fi
emacsclient --tty -create-frame --alternate-editor="" "${args[@]}"
else
if ! $force_wait; then
args+=(--no-wait); fi
emacsclient -create-frame --alternate-editor="" "${args[@]}"
fi
#+end_src

* Useful functions/macros that are helpful for configuration

- *load!* for loading external *.el files relative to this one
- *use-package!* for configuring packages
- *after!* for running code after a package has loaded
- *add-load-path!* for adding directories to the *load-path*, relative to
this file. Emacs searches the *load-path* when you load packages with
*require* or *use-package*.
- *map!* for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press =K= (non-evil users must press =C-c c k=).
This will open documentation for it, including demos of how they are used.

You can also try =gd= (or =C-c c d=) to jump to their definition and see how
they are implemented.

* The looks

** Theme configuration

There are two ways to load a /theme/ in *Doom Emacs*, assuming that it is installed and available
1. Set it using the =doom-theme= variable
2. Manually load it using the =load-theme= function

#+begin_src elisp
(setq doom-theme 'doom-palenight)
#+end_src

Nicer name for the default fallback buffer
#+begin_src elisp
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")
#+end_src

Only show file-encoding when format is not =LF UTF-8= (source [[Credits][Tecosaur]])
#+begin_src elisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                 '(coding-category-undecided coding-category-utf-8))
                           (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                t)))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src

Simpler window title that shows if a file was modified:
#+begin_src elisp
(setq frame-title-format
      '(""
        (:eval
         (if (s-contains-p org-directory (or buffer-file-name ""))
             (replace-regexp-in-string
              ".*/[0-9]*-?" "☰ "
              (subst-char-in-string ?_ ?  buffer-file-name))
           "%b"))
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ◉ %s" " ● %s") project-name))))))
#+end_src

** Font configuration

*** Basic font configuration

Doom exposes five (optional) variables for controlling fonts:
- =doom-font=
- =doom-serif-font= (not super sure about this one)
- =doom-variable-pitch-font=
- =doom-unicode-font=
- =doom-big-font= - Used for =doom-big-font-mode= for presentations or streaming
#+begin_src elisp
(setq doom-font (font-spec :family "VictorMono Nerd Font" :size 16 :height 100)
      doom-variable-pitch-font (font-spec :family "Alegreya" :size 20 :height 120)
      doom-unicode-font (font-spec :family "FiraCode Nerd Font" :size 16)
      doom-serif-font (font-spec :family "BlexMono Nerd Font" :weight 'light :size 16)
      doom-big-font (font-spec :family "FiraCode Nerd Font" :size 25))
#+end_src

Code snippet to check if we are missing our required font (from [[Credits][Tecosaur]])
#+begin_src elisp
(defvar required-fonts '("VictorMono Nerd Font" "Overpass Nerd Font" "Alegreya" "FiraCode Nerd Font" "BlexMono Nerd Font"))

(defvar available-fonts
  (delete-dups (or (font-family-list)
                   (split-string (shell-command-to-string "fc-list : family")
                                 "[,\n]"))))

(defvar missing-fonts
  (delq nil (mapcar
             (lambda (font)
               (unless (delq nil (mapcar (lambda (f)
                                           (string-match-p (format "^%s$" font) f))
                                         available-fonts))
                 font))
             required-fonts)))

(if missing-fonts
    (pp-to-string
     `(unless noninteractive
        (add-hook! 'doom-init-ui-hook
          (run-at-time nil nil
                       (lambda ()
                         (message "%s missing the following fonts: %s"
                                  (propertize "Warning!" 'face '(bold warning))
                                  (mapconcat (lambda (font)
                                               (propertize font 'face 'font-lock-variable-name-face))
                                             ',missing-fonts
                                             ", "))
                         (sleep-for 0.5))))))
  ";; No missing fonts detected")
#+end_src

We can change the font used in the various faces across /Emacs/ using =custom-set-faces=.

There are several faces, some of them are:
- =font-lock-preprocessor-face=
- =font-lock-comment-face=
- =font-lock-keyword-face=
- =font-lock-comment-face=
- =font-lock-constant-face=
- =font-lock-function-name-face=
- =font-lock-keyword-face=
- =font-lock-preprocessor-face=
- =font-lock-string-face=
- =hl-todo=
- =info-colors-lisp-code-block=
- =markdown-code-face=

#+begin_src elisp
(custom-set-faces!
  '(font-lock-preprocessor-face :weight bold)
  '(font-lock-keyword-face :slant italic :weight bold))
#+end_src

*** Org-mode look customization

Hide emphasis markup, eg. *bold*, /italics/, +strikethrough+, ~highlight~
#+begin_src elisp
(setq org-startup-folded 'overview)
(setq org-hide-emphasis-markers t)
#+end_src

Change how the bullets look
#+begin_src elisp
(with-eval-after-load 'org-superstar
  (set-face-attribute 'org-superstar-item nil :height 1.15)
  (set-face-attribute 'org-superstar-header-bullet nil :height 1.15)
  (set-face-attribute 'org-superstar-leading nil :height 1.2))
(setq org-superstar-prettify-item-bullets t)
(setq org-superstar-headline-bullets-list '("➊" "➋" "➌" "➍" "➎" "➏" "➐" "➑" "➒"))
;; (setq org-superstar-headline-bullets-list '("⚝" "◉" "⁚" "⁖" "⁘" "⁙" "✿" "✸" "○"))
;; (setq org-superstar-headline-bullets-list '("१" "२" "३" "४" "५" "६" "७" "८" "९"))
;; (setq org-superstar-headline-bullets-list '("೧" "೨" "೩" "೪" "೫" "೬" "೭" "೮" "೯"))
;; (setq org-superstar-headline-bullets-list '("一" "二" "三" "四" "五" "六" "七" "八"))
(setq org-ellipsis "…")
#+end_src

Make "quote" blocks /italic/
#+begin_src elisp
(setq org-fontify-quote-and-verse-blocks t)
#+end_src


** Ligatures

#+begin_src elisp
(appendq! +ligatures-extra-symbols
          `(:src_block     "»"
            :src_block_end "«"
            :alias         "₳"
            :created:      "ᗫ"
            :last_modified:"∂"
            :tags          "τ"
            :checkbox      "☐"
            :pending       "■"
            :checkedbox    "🗹"
            :list_property "∷"
            :em_dash       "—"
            :ellipses      "…"
            :arrow_right   "→"
            :arrow_left    "←"
            :title         "干"
            :subtitle      "𝙩"
            :author        "Ꭿ"
            :date          "𝘿"
            :property      "☸"
            :options       "⌥"
            :latex_class   "🄲"
            :latex_header  "⇥"
            :beamer_header "↠"
            :attr_latex    "🄛"
            :attr_html     "🄗"
            :begin_quote   "❝"
            :end_quote     "❞"
            :caption       "☰"
            :header        "›"
            :results       "🠶"
            :begin_export  "⏩"
            :end_export    "⏪"
            :properties    "⚙"
            :end           "∎"
            :priority_a   ,(propertize "⚑" 'face 'all-the-icons-red)
            :priority_b   ,(propertize "⬆" 'face 'all-the-icons-orange)
            :priority_c   ,(propertize "■" 'face 'all-the-icons-yellow)
            :priority_d   ,(propertize "⬇" 'face 'all-the-icons-green)
            :priority_e   ,(propertize "❓" 'face 'all-the-icons-blue)))
(set-ligatures! 'org-mode
  :merge t
  :tags          "#+roam_tags:"
  :alias         "#+roam_alias:"
  :created:      "#+created:"
  :last_modified:"#+last_modified:"
  :checkbox      "[ ]"
  :pending       "[-]"
  :checkedbox    "[X]"
  :list_property "::"
  :em_dash       "---"
  :ellipsis      "..."
  :arrow_right   "->"
  :arrow_left    "<-"
  :title         "#+title:"
  :subtitle      "#+subtitle:"
  :author        "#+author:"
  :date          "#+date:"
  :property      "#+property:"
  :options       "#+options:"
  :latex_class   "#+latex_class:"
  :latex_header  "#+latex_header:"
  :beamer_header "#+beamer_header:"
  :attr_latex    "#+attr_latex:"
  :attr_html     "#+attr_latex:"
  :begin_quote   "#+begin_quote"
  :end_quote     "#+end_quote"
  :caption       "#+caption:"
  :header        "#+header:"
  :begin_export  "#+begin_export"
  :end_export    "#+end_export"
  :results       "#+RESULTS:"
  :property      ":PROPERTIES:"
  :end           ":END:"
  :priority_a    "[#A]"
  :priority_b    "[#B]"
  :priority_c    "[#C]"
  :priority_d    "[#D]"
  :priority_e    "[#E]")
(plist-put! +ligatures-extra-symbols
            :name          "⁍"
            :true          "⊤"
            :false         "F"
            :pipe          "⯈")
#+end_src

** Mixed pitch mode

Org-mode hook for pretty =unicode= header symbols and =mixed pitch font=
- I think the =unicode= header symbols are automatically included with the =org +pretty= flag in ~init.el~, hence adding another hook for that is redundant.
- Finally, we enable =visual-line-mode= and =org-appear-mode=
#+begin_src elisp
(add-hook! 'org-mode-hook #'+org-pretty-mode #'mixed-pitch-mode #'visual-line-mode)
(add-hook! (gfm-mode markdown-mode) #'mixed-pitch-mode #'visual-line-mode)
#+end_src

Disable =org-appear-autolinks=
#+begin_src elisp
(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks nil)
  ;; for proper first-time setup, `org-appear--set-elements'
  ;; needs to be run after other hooks have acted.
  (run-at-time nil nil #'org-appear--set-elements))
#+end_src

Adjust the height of =mixed-pitch= font
#+begin_src elisp
(use-package! mixed-pitch
  :hook (org-mode . mixed-pitch-mode)
  :config
  (setq mixed-pitch-set-height t)
  (set-face-attribute 'org-hide nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-document-title nil
                      :height 1.9
                      :weight 'bold)
  )
#+end_src

Use ~Alegreya~ font as =variable-pitch-serif-font=
#+begin_src elisp
(autoload #'mixed-pitch-serif-mode "mixed-pitch"
  "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch." t)

(after! mixed-pitch
  (defface variable-pitch-serif
    '((t (:family "serif")))
    "A variable-pitch face with serifs."
    :group 'basic-faces)
  (setq mixed-pitch-set-height t)
  (setq variable-pitch-serif-font (font-spec :family "Alegreya" :size 20))
  (set-face-attribute 'variable-pitch-serif nil :font variable-pitch-serif-font)
  (defun mixed-pitch-serif-mode (&optional arg)
    "Change the default face of the current buffer to a serifed variable pitch, while keeping some faces fixed pitch."
    (interactive)
    (let ((mixed-pitch-face 'variable-pitch-serif))
      (mixed-pitch-mode (or arg 'toggle)))))
#+end_src

Change header sizes in =org-mode=.
#+begin_src elisp
(after! org
  (setq
   org-todo-keyword-faces
   '(("TODO" :foreground "#7c7c75" :weight normal :underline t)
     ("NEXT" :foreground "#9f7efe" :weight normal :underline t)
     ("WAITING" :foreground "#9f7efe" :weight normal :underline t)
     ("INPROGRESS" :foreground "#0098dd" :weight normal :underline t)
     ("DONE" :foreground "#50a14f" :weight normal :underline t)
     ("CANCELLED" :foreground "#ff6480" :weight normal :underline t)))
  (set-face-attribute 'org-link nil
                      :weight 'normal)
  (set-face-attribute 'org-roam-link nil :foreground "#f07178")
  (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-hide nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-date nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-level-1 nil
                      :height 1.7
                      :weight 'bold)
  (set-face-attribute 'org-level-2 nil
                      :height 1.5
                      :weight 'bold)
  (set-face-attribute 'org-level-3 nil
                      :height 1.25
                      :weight 'bold)
  (set-face-attribute 'org-level-4 nil
                      :height 1.15
                      :weight 'bold)
  (set-face-attribute 'org-level-5 nil
                      :weight 'bold)
  (set-face-attribute 'org-level-6 nil
                      :weight 'bold)
  (set-face-attribute 'org-document-title nil
                      :height 1.9
                      :weight 'bold))
(use-package! org-fancy-priorities
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")))
#+end_src

=org-pretty-table= configuration
#+begin_src elisp
(use-package! org-pretty-table
  :commands (org-pretty-table-mode global-org-pretty-table-mode))
#+end_src

#+begin_src elisp :tangle no
(after! mixed-pitch
  (set-face-attribute 'org-document-title nil
                      :height 1.9
                      :weight 'bold))
#+end_src
** Whitespace

Set =global whitespace mode=
#+begin_src elisp
(setq
 global-whitespace-mode t
 whitespace-style '(face tabs tab-mark trailing newline newline-mark indentation))
(global-whitespace-mode +1)
#+end_src
** Writeroom configuration
- source :: https://tecosaur.github.io/emacs-config/config.html#writeroom

#+begin_src elisp
(setq +zen-text-scale 0.8)
(defvar +zen-serif-p t
  "Whether to use a serifed font with `mixed-pitch-mode'.")
(after! writeroom-mode
  (defvar-local +zen--original-org-indent-mode-p nil)
  (defvar-local +zen--original-mixed-pitch-mode-p nil)
  (defvar-local +zen--original-solaire-mode-p nil)
  (defvar-local +zen--original-org-pretty-table-mode-p nil)
  (defun +zen-enable-mixed-pitch-mode-h ()
    "Enable `mixed-pitch-mode' when in `+zen-mixed-pitch-modes'."
    (when (apply #'derived-mode-p +zen-mixed-pitch-modes)
      (if writeroom-mode
          (progn
            (setq +zen--original-solaire-mode-p solaire-mode)
            (solaire-mode -1)
            (setq +zen--original-mixed-pitch-mode-p mixed-pitch-mode)
            (funcall (if +zen-serif-p #'mixed-pitch-serif-mode #'mixed-pitch-mode) 1))
        (funcall #'mixed-pitch-mode (if +zen--original-mixed-pitch-mode-p 1 -1))
        (when +zen--original-solaire-mode-p (solaire-mode 1)))))
  (pushnew! writeroom--local-variables
            'visual-fill-column-width)
  (add-hook 'writeroom-mode-enable-hook
            (defun +zen-prose-org-h ()
              "Reformat the current Org buffer appearance for prose."
              (whitespace-mode -1)
              (when (eq major-mode 'org-mode)
                visual-fill-column-width 100
                (setq
                 +zen--original-org-pretty-table-mode-p (bound-and-true-p org-pretty-table-mode))
                (org-pretty-table-mode 1))))
  (add-hook 'writeroom-mode-disable-hook
            (defun +zen-nonprose-org-h ()
              "Reverse the effect of `+zen-prose-org'."
              (whitespace-mode +1)
              (when (eq major-mode 'org-mode)
                ;; (unless +zen--original-org-pretty-table-mode-p (org-pretty-table-mode -1))
                ))))
#+end_src

* Simple settings

** Battery status and password-cache

#+begin_src elisp
(if (equal "Battery status not available"
           (battery))
    (display-battery-mode 1)  ; On laptops it's nice to know how much power you have
  (setq password-cache-expiry nil)) ; no battery = desktop
#+end_src

** Deleting files, undo limits, etc.

- Delete files to trash
- Take new window space from all other windows (not just current)
- Stretch cursor to glyph width (for variable-pitch-font)
#+begin_src elisp
(setq-default
 delete-by-moving-to-trash t
 window-combination-resize t
 x-stretch-cursor t)
#+end_src

- Raise the undow limit to =80Mb=
- Granular undos in insert mode!
- Unicde ellipsis (… )
#+begin_src elisp
(setq undo-limit 80000000
      evil-want-fine-undo t
      truncate-string-ellipsis "…")
#+end_src

** Select buffer after splitting

Being able to see which buffer to open after splitting windows
1. First we will enter the new window
#+begin_src elisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

2. Then we will pull up =ivy=
#+begin_src elisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (+ivy/switch-buffer))
#+end_src

3. Also, enable previews
#+begin_src elisp
(setq +ivy-buffer-preview t)
#+end_src

** Rotate layouts

Add keybinding to rotate the layout of all windows
#+begin_src elisp
(map! :map evil-window-map
      "SPC" #'rotate-layout)
#+end_src

** Wakatime-mode

Enable =wakatime-mode= by default
#+begin_src elisp
(global-wakatime-mode)
#+end_src

** Chezmoi keybindings

Keybinding to sync dotfiles using chezmoi
#+begin_src elisp
(defun czy ()
  " Apply changes to files using chezmoi "
  (interactive)
  (shell-command "chezmoi apply"))

(map! :leader
      :prefix "z"
      :desc "chezmoi apply" "y" #'czy)
#+end_src

* Buffers and windows

** Ivy Buffers

Make =ivy= open buffers in /horizontal/ and /vertical/ splits using ~M-o |~ and ~M-o %~
TODO These don't work yet. The problem is going from filename to file location and jumping to it

#+begin_src elisp :tangle no
(defun find-file-right (filename)
  (interactive)
  (split-window-right)
  (other-window 1)
  (find-file filename))

(defun find-file-below (filename)
  (interactive)
  (split-window-below)
  (other-window 1)
  (find-file filename))

(ivy-set-actions
 'counsel-find-file
 '(("|" find-file-right "open right")
   ("%" find-file-below "open below")))

(ivy-set-actions
 'counsel-recentf
 '(("|" find-file-right "open right")
   ("%" find-file-below "open below")))

(ivy-set-actions
 'counsel-buffer-or-recentf
 '(("|" find-file-right "open right")
   ("%" find-file-below "open below")))

(ivy-set-actions
 'ivy-switch-buffer
 '(("|" find-file-right "open right")
   ("%" find-file-below "open below")))
#+end_src
** Registers

By default ~Doom Emacs~ uses =C-x r= for register, we want to use =SPC r=
#+begin_src elisp
(map! :leader
      (:prefix ("r" . "registers")
       :desc "Copy to register" "c" #'copy-to-register
       :desc "Frameset to register" "f" #'frameset-to-register
       :desc "Insert contents of register" "i" #'insert-register
       :desc "Jump to register" "j" #'jump-to-register
       :desc "List registers" "l" #'list-registers
       :desc "Number to register" "n" #'number-to-register
       :desc "Interactively choose a register" "r" #'counsel-register
       :desc "View a register" "v" #'view-register
       :desc "Window configuration to register" "w" #'window-configuration-to-register
       :desc "Increment register" "+" #'increment-register
       :desc "Point to register" "SPC" #'point-to-register))
#+end_src

* dired

** Keybindings

We will be using =SPC d= for all =dired= keybindings (since ~Doom Emacs~) doesn't use that for anything else
#+begin_src elisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump))
;; Make 'h' and 'l' go back and forward in dired. Much faster to navigate the directory structure!
(evil-define-key 'normal dired-mode-map
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-find-file) ; use dired-find-file instead if not using dired-open package
;; If peep-dired is enabled, you will get image previews as you go up/down with 'j' and 'k'
;; Get file icons in dired
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src

* Autocompletions and snippets

** Autocompletions

Decrease =company-mode= completion delay and other nice things 🤣 (also I just figured out how to insert emoji).
#+begin_src elisp
(after! company
  (setq company-idle-delay 0.2
        company-minimum-prefix-length 2)
  (setq company-show-numbers t))
#+end_src

Improve =prescient= usage by increasing history
#+begin_src elisp
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+end_src

Having =ispell= enabled in =text=, =markdown= and =GFM=
#+begin_src elisp
(setq ispell-dictionary "en")
(set-company-backend!
  '(text-mode
    markdown-mode
    gfm-mode)
  '(:seperate
    company-ispell
    company-files
    company-yasnippet))
#+end_src

** Snippets

*** Basic configuration

Change the default snippets directory
#+begin_src elisp
(setq +snippets-dir "/home/dileep/.dotfiles/dot_doom.d/snippets")
#+end_src

*** Documentation snippets

=Numpydoc= documentation snippet plugin
#+begin_src elisp
(use-package numpydoc
  :bind (:map python-mode-map
         ("C-c C-n" . numpydoc-generate)))
(setq numpydoc-insertion-style 'yas)
(setq numpydoc-insert-examples-block nil)
#+end_src

* Vim and Evil mode configuration

This determines the style of the /line numbers/
#+begin_src elisp
(setq display-line-numbers-type 'visual)
#+end_src

* Org-mode and Org-roam configuration

** Org-mode tasks

Enable logging of done tasks, and log stuff into LOGBOOK drawer by default
#+begin_src elisp
(after! org
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  ;; Don't log when changing state with shift-arrows
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  ;; Update org-todo keywords
  (setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "WAITING(w@/!)" "INPROGRESS(i)" "|" "DONE(d)" "CANCELLED(c)")))
  ;; Ensure that sub-tasks must be completed before parent can be marked done
  (setq org-enforce-todo-dependencies t))
#+end_src

Turn on auto-revert mode in org mode files so that they automatically update when changed (e.g. by =syncthing=)
#+begin_src elisp
(add-hook 'org-mode-hook 'auto-revert-mode)
#+end_src

** TODO Org-agenda and org-super-agenda configuration
- source :: https://www.tquelch.com/posts/emacs-config/#agenda

** Support =lsp= in =src= blocks

#+begin_src elisp
(cl-defmacro lsp-org-babel-enable (lang)
  "Support LANG in org source code block."
  (setq centaur-lsp 'lsp-mode)
  (cl-check-type lang stringp)
  (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
    `(progn
       (defun ,intern-pre (info)
         (let ((file-name (->> info caddr (alist-get :file))))
           (unless file-name
             (setq file-name (make-temp-file "babel-lsp-")))
           (setq buffer-file-name file-name)
           (lsp-deferred)))
       (put ',intern-pre 'function-documentation
            (format "Enable lsp-mode in the buffer of org source block (%s)."
                    (upcase ,lang)))
       (if (fboundp ',edit-pre)
           (advice-add ',edit-pre :after ',intern-pre)
         (progn
           (defun ,edit-pre (info)
             (,intern-pre info))
           (put ',edit-pre 'function-documentation
                (format "Prepare local buffer environment for org source block (%s)."
                        (upcase ,lang))))))))
(defvar org-babel-lang-list
  '("go" "python" "ipython" "bash" "sh"))
(dolist (lang org-babel-lang-list)
  (eval `(lsp-org-babel-enable ,lang)))
#+end_src

** Org-roam

You might want to refer to the [[https://www.orgroam.com/manual.html#The-Templating-System][templating system documentation]] for details.

Set up the default directories
#+begin_src elisp
(setq org-directory "~/Documents/Org")
(after! org-roam
  (setq org-roam-directory "~/Documents/Org/Roam"))
#+end_src

Keybindings
#+begin_src elisp
(map! :leader
      (:prefix-map ("n" . "notes")
       (:when (featurep! :lang org +roam)
        (:prefix ("r" . "roam")
         :desc "toggle buffer" "t" #'org-roam-buffer-toggle-display))))
#+end_src

*** Org-roam dailies

#+begin_src elisp
(after! org-roam
  (setq org-roam-dailies-directory "dailies/")

  (defun get-string-from-file (filePath)
    "Return filePath's file content."
    (with-temp-buffer
      (insert-file-contents filePath)
      (buffer-string)))

  (setq org-roam-dailies-capture-templates
        (let
            ((day_template (get-string-from-file "~/Documents/Org/Roam/_templates/dailies-template.org"))
             (week_template (get-string-from-file "~/Documents/Org/Roam/_templates/weekly-template.org")))
          `(("j" "journaling" item
             #'org-roam-capture--get-point
             "- %?"
             :empty-lines-before 1
             :file-name "dailies/%<%Y-%m-%d>"
             :head ,day_template
             :olp ("Journaling"))
            ("p" "plan" item
             #'org-roam-capture--get-point
             "** TODO %<%H:%M> %?"
             :file-name "dailies/%<%Y-%m-%d>"
             :head ,day_template
             :empty-lines-before 1
             :olp ("Day Planner"))
            ("t" "thoughts" item
             #'org-roam-capture--get-point
             "- %<%H:%M> %?"
             :file-name "dailies/%<%Y-%m-%d>"
             :head ,day_template
             :empty-lines-before 1
             :olp ("Thoughts"))
            ("w" "weekly" item
             #'org-roam-capture--get-point
             "%?"
             :file-name "dailies/%<%Y-w%U>"
             :head ,week_template
             :empty-lines-before 1
             :olp ("How was your week? General thoughts")))))
  )
#+end_src

*** Org-roam capture templates

Templates for general notes
#+begin_src elisp
(after! org-roam

  (setq org-roam-capture-templates
        '(("d" "default" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "%<%Y%m%d%H%M>-${slug}"
           :head "#+TITLE: ${title}\n#+roam_alias:\n#+roam_tags:\n#+author: %(concat user-full-name)\n#+created: %u\n#+last_modified: %U\n\n"
           :unnarrowed t)
          ("l" "literature" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "literature/%<%Y%m%d%H%M>-${slug}"
           :head "#+TITLE: ${title}\n#+roam_alias:\n#+roam_tags: literature %^{roam_tags}\n#+author: %(concat user-full-name)\n#+created: %u\n#+last_modified: %U\n\n"
           :unnarrowed t)
          ("f" "fleeting" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "fleeting/%<%Y%m%d%H%M>-${slug}"
           :head "#+TITLE: ${title}\n#+roam_alias:\n#+roam_tags:fleeting\n#+author: %(concat user-full-name)\n#+created: %u\n#+last_modified: %U\n\n"
           :unnarrowed t)
          ("p" "Permanent (prompt folder)" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "%(read-directory-name \"directory: \" org-directory)/%<%Y%m%d%H%M>-${slug}"
           :head "#+TITLE: ${title}\n#+roam_alias:\n#+roam_tags: permanent\n#+author: %(concat user-full-name)\n#+created: %u\n#+last_modified: %U\n\n"
           :unnarrowed t)))
  )
#+end_src

Templates for capturing references from the web using =org-protocol=
#+begin_src elisp
(after! org-roam
  (setq org-roam-capture-ref-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           "%?"
           :file-name "websites/${slug}"
           :head "#+TITLE: ${title}\n#+roam_alias:\n#+ROAM_KEY: ${ref}\n#+roam_tags: websites\n#+author: %(concat user-full-name)\n#+created: %u\n#+last_modified: %U\n- source :: ${ref}\n\n"
           :unnarrowed t)
          ("i" "incremental" plain
           (function org-roam-capture--get-point)
           "* %?"
           :file-name "websites/${slug}"
           :head "#+TITLE: ${title}\n#+roam_alias:\n#+ROAM_KEY: ${ref}\n#+roam_tags: websites\n#+author: %(concat user-full-name)\n#+created: %u\n#+last_modified: %U\n- source :: ${ref}\n\n"
           :unnarrowed t
           :empty-lines-before 1))))
#+end_src
*** Org-roam hooks

A hook to update =last_modified= at save. Source =org-roam= discourse
#+begin_src elisp
;;--------------------------
;; Handling file properties for ‘CREATED’ & ‘LAST_MODIFIED’
;;--------------------------

(defun zp/org-find-time-file-property (property &optional anywhere)
  "Return the position of the time file PROPERTY if it exists.
    When ANYWHERE is non-nil, search beyond the preamble."
  (save-excursion
    (goto-char (point-min))
    (let ((first-heading
           (save-excursion
             (re-search-forward org-outline-regexp-bol nil t))))
      (when (re-search-forward (format "^#\\+%s:" property)
                               (if anywhere nil first-heading)
                               t)
        (point)))))

(defun zp/org-has-time-file-property-p (property &optional anywhere)
  "Return the position of time file PROPERTY if it is defined.
    As a special case, return -1 if the time file PROPERTY exists but
    is not defined."
  (when-let ((pos (zp/org-find-time-file-property property anywhere)))
    (save-excursion
      (goto-char pos)
      (if (and (looking-at-p " ")
               (progn (forward-char)
                      (org-at-timestamp-p 'lax)))
          pos
        -1))))

(defun zp/org-set-time-file-property (property &optional anywhere pos)
  "Set the time file PROPERTY in the preamble.
    When ANYWHERE is non-nil, search beyond the preamble.
    If the position of the file PROPERTY has already been computed,
    it can be passed in POS."
  (when-let ((pos (or pos
                      (zp/org-find-time-file-property property))))
    (save-excursion
      (goto-char pos)
      (if (looking-at-p " ")
          (forward-char)
        (insert " "))
      (delete-region (point) (line-end-position))
      (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
        (insert now)))))

(defun zp/org-set-last-modified ()
  "Update the LAST_MODIFIED file property in the preamble."
  (when (derived-mode-p 'org-mode)
    (zp/org-set-time-file-property "last_modified")))
#+end_src

Add this hook
#+begin_src elisp
(add-hook 'before-save-hook #'zp/org-set-last-modified)
#+end_src

*** Org-roam-protocol

Registering the =roam-protocol=
#+begin_src config :tangle no
[Desktop Entry]
Name=Org-Protocol
Exec=emacsclient %u
Icon=emacs-icon
Type=Application
Terminal=false
MimeType=x-scheme-handler/org-protocol
#+end_src

Associate =org-protocol://= links with the desktop file:
#+begin_src shell :tangle no
xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
#+end_src

TODO Customize graph view for =org-protocol=

*** Org-roam-server

Settings for the =org-roam-server=
#+begin_src elisp
(use-package! org-roam-server
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
#+end_src

*** Searching and indexing files

Using =deft= to navigate =org-roam= files
#+begin_src elisp
(use-package deft
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory "~/Documents/Org/Roam"))
#+end_src
*** Org-noter and org-roam-bibtex configuration

#+begin_quote
The following configuration was taken from [[https://www.ianjones.us/org-roam-bibtex][Ian Jones's org-roam-bibtex workflow]]
#+end_quote

Define some variables
#+begin_src elisp
(setq
 lit_notes "~/Documents/Org/Roam/literature"
 zot_bib "~/Documents/Org/library.bib")
#+end_src

Configuration for =org-noter= (this is already installed in ~Doom Emacs~)
#+begin_src elisp
(use-package! org-noter
  :after (:any org pdf-view)
  :config
  (setq
   ;; The WM can handle splits
   org-noter-notes-window-location 'horizontal-split
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the main notes file
   org-noter-notes-search-path (list lit_notes)
   )
  )
#+end_src

You might want to run =M-x pdf-tools-install= to view pdfs. Then set up the =org-pdftools= and =org-noter-pdftools= packages
#+begin_src elisp
(use-package org-pdftools
  :hook (org-load . org-pdftools-setup-link))
(use-package org-noter-pdftools
  :after org-noter
  :config
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

Configuration for =helm-bibtex=
#+begin_src elisp
(setq
 bibtex-completion-notes-path lit_notes
 bibtex-completion-bibliography zot_bib
 bibtex-completion-pdf-field "file")
#+end_src

Set up =org-ref= to manage ~cite:~  links
#+begin_src elisp
(use-package! org-ref
  :after org
  :config
  (setq
   org-ref-completion-library 'org-ref-ivy-cite
   ;; org-ref-completion-library 'org-ref-helm-insert-cite-link
   org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
   org-ref-default-bibliography (list zot_bib)
   org-ref-bibliography-notes (concat lit_notes "/bibnotes.org")
   org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
   org-ref-notes-directory lit_notes
   org-ref-notes-function 'orb-edit-notes
   ))
#+end_src

#+begin_quote
Note:
=org-ref= template options are not the same as =org-roam= template options
#+end_quote

Finally, we configure =org-roam-bibtex=
#+begin_src elisp
(use-package! org-roam-bibtex
  :after (org-roam)
  :load-path zot_bib
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :config
  (setq orb-preformat-keywords
        '(("citekey" . "=key=") "title" "url" "file" "author-or-editor" "keywords"))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "literature/${slug}"
           :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}\n#+roam_alias:\n#+roam_tags: literature\n#+author: %(concat user-full-name)\n#+created: %u\n#+last_modified: %U
- tags ::
- keywords :: ${keywords}
\n* ${title}
:PROPERTIES:
:Custom_ID: ${citekey}
:URL: ${url}
:AUTHOR: ${author-or-editor}
:NOTER_DOCUMENT: ${file}
:NOTER_PAGE:
:END:\n\n"
           :unnarrowed t))))
#+end_src

*** TODO org-roam-graph configuration
- source ::  https://www.tquelch.com/posts/emacs-config/#roam
** Org-mode addons

*** Org-download

#+begin_src elisp
(use-package org-download
  :after org
  :bind
  (:map org-mode-map
   (("s-Y" . org-download-screenshot)
    ("s-y" . org-download-yank))))
#+end_src

*** TODO =mathpix.el=

#+begin_quote
Right now I think that this is unnecessary as I can just use the desktop app
#+end_quote

** Git-commit keybinding

Keybinding to commit =org= repository using script in =~/.dotfiles/bin/org-git-add-commit.sh=
#+begin_src elisp
(defun org-git-add-commit ()
  " Commit changes in the Org repo using a bash script "
  (interactive)
  (shell-command "bash ~/.dotfiles/bin/org-git-add-commit.sh"))

(map! :leader
      :prefix "z"
      :desc "org-git-add-commit" "c" #'org-git-add-commit)
#+end_src

* Language specific configuration

** Julia

#+begin_src elisp
(setq lsp-julia-default-environment "~/.julia/environments/v1.6")
#+end_src

* Credits

- [[https://tecosaur.github.io/emacs-config][Tecosaur's emacs config]]
- [[https://www.youtube.com/playlist?list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj][Doomcasts by Zaiste Programming]]
- [[https://www.ianjones.us/about-me][Ian Jones's blog]]
- [[https://gitlab.com/dwt1/dotfiles][Distrotube Derek Taylor's dotfiles]]
